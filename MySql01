案例1-单表的curd
需求：
	对一张表中的数据进行增删改查操作
	C:create 创建
	U:update 修改
	R:read   读|检索 查询
	D:delete 删除
技术分析：
	数据库
	sql语句
///////////////////////////
数据库：
	本质上就是一个文件系统。通过标准的sql语句对数据进行curd操作
安装 数据库管理系统：
	数据库管理系统就是一个软件
常见的关系型数据库：
	存放实体与实体之间关系的数据库（就是二维表）
	实体：
		用户    订单    商品
	关系：
		用户拥有订单
		订单包含商品
非关系型数据库：
	存放的是对象（redis） NO-sql（not only sql）

软件名		厂商			特点
mysql		oracle		开源的数据库
oracle		oracle		大型的收费的数据库
DB2			IBM			大型的收费的数据库
sqlserver   微软			中大型的收费数据库
sybase		sybase（powerdesigner）

安装了数据库管理系统的计算机称之为数据库服务器
	服务器：给别人提供服务（软件服务器）
我们可以通过标准的sql在服务器创建数据库（database）
有了数据库之后，就可以在数据库上创建表
有了表之后，就可以在里面存放数据。
SQL：
	结构化查询语句
	作用：
		管理数据库。
sql的分类：
	DDL:数据定义语言
		操作对象：数据库和表
		关键词：create alter drop
	DML:数据操作语言
		操作对象：记录
	DCL:数据查询语言（非官方）
	DQL:数据控制语言
		操作对象：用户 事务 权限
////////////////////////////////
命令行操作MySql:
登录数据库：
	mysql -uroot -p密码
DDL:数据定义语言
		操作对象：数据库和表
		关键词：create alter drop
	操作数据库：
		创建：
			格式:
				create database 数据库名称；
		删除：
			格式：
				drop database 数据库名称；
		常用的命令：
			查看所有的数据库：show databases；
	操作表：
		创建表：
			格式：
				create table 表名（字段描述，字段描述）；
				字段描述：
					字段名称 字段类型 [约束]
				例如：
					create table user(
						id int primary key auto_increment,
						username varchar(20)
					);
		修改表：
			格式：
				alter table 表名 ....
			修改表名：
				alter table 旧表名 rename to 新表名；
				例如：
					alter table user1 rename to user10；
			添加字段：
				alter table 表名 add [column] 字段描述；
				例如：
					alter table user add password varchar（20）；
			修改字段名：
				alter table 表名 change 字段名称 新的字段名称 新的字段描述；
				例如：
					alter table user change password pwd varchar（20）；
			修改字段描述：
				alter table 表名 modify 字段名称 字段类型 [约束];
				例如：
					alter table user modify pwd int；
			删除字段：
				alter table 表名 drop 字段名称；
				例如：
					alter table user drop pwd；
		删除表：
			格式：
				drop table 表名；
		常用命令：
			切换或者进入数据库： use 数据库名称；
			查看当前数据库下的所有表：show tables；
			查看表结构：desc 表名；
			查看建表语句：show create table 表名；
			查询表：select * from 表名;

///////////////////////////////
DML: 数据操作语言
	操作对象：记录（行）
	关键词insert update delete
	插入：
		格式1：
			insert into 表名 values（字段值1，字段值2 ....，字段值n）；
			注意：
				默认插入全部字段，
				必须保证values后面的内容的类型和顺序和表结构中的一致。
				若字段类型为数字，可以省略引号。
			例如：
				insert into user values（1,'tom'）;
		格式2：
			inset into 表名（字段名，字段名1....） values（字段值，字段值1...)；
			注意：
				插入指定的字段
				必须保证values后面的内容的类型和顺序和表表名后面的字段类型和顺序保持一致。
			例如：
				inset into user（username，id） values（'jack',4);
	修改：
		格式：
			update 表名 set 字段名=字段值，字段名1=字段值1... [where 条件]；
			例如：
				update user set username='jerry' where username='jack';
	删除：
		格式：
			delete from 表名 [where 条件];
			例如：
				delete from user where id=2;

////////////////////////////////////////////
DQL:数据查询语言
	关键词：select
	格式：
		select ... from 表名 where 条件 group by 分组字段 having 条件 order by 排序字段 ase|desc
	初始化环境：
		// 创建商品表
		create table products(
			pid int primary key auto_increment,
			pname varchar(20),
			price double,
			pnum int,
			cno int,
			pdate timestamp
		);

		insert into products values(null,'泰国大榴莲',98,12,1,null);
		insert into products values(null,'新疆大枣',38,123,1,null);
		insert into products values(null,'新疆切糕',68,50,2,null);
		insert into products values(null,'十三香',10,200,3,null);
		insert into products values(null,'老干妈',20,180,3,null);
		insert into products values(null,'豌豆黄',20,120,2,null);

练习：
简单查询：
	1.查询所有的商品
		select * from products;
	2.查询商品名称和商品价格
		select pname,price from products;
	3.查询所有商品都有哪些价格
		// 去重操作 distinct
		select distinct price from products;
	4.将所有商品的价格+10元进行显示.（别名）
		// 可以再查询的结果之上进行运算，不影响数据库中的值
		// 起别名 格式： 字段名 [as] 别名
		select price+10 新价格 from products;
		select price+10 '新 价 格' from products;
		select price+10 `新 价 格` from products;

条件查询：
	1.查询商品名称为十三香的商品所有信息
		select * from products where pname='十三香';
	2.查询商品价格>60元的所有的商品信息
		select * from products where price>60;
	3.查询商品名称中包含“新”的商品
		// 模糊匹配
		// 格式：字段名 like "匹配规则";
		// 		匹配内容 %  
						"龙"  	值为龙
						"%龙" 	值以“龙”结尾
						"龙%"	值以“龙”开头
						"%龙%"	值包含“龙”
		// 		匹配个数 "__" 占两个位置
		select * from products where pname like "%新%";
	4.查询价格为38，68，98的商品
		select * from products where price=38 or price=68 or price=98;
		select * from products where price in(38,68,98);

====> where后的条件写法：
		* >, <, =, >=, <=, <>, !=
		* like 使用占位符 _和 % ， _代表一个字符 %代表任意个字符。
		* in在某个范围中获得值. 
		* between 较小值 and 较大值
			select * from products where price between 50 and 70;

排序查询：
	1.查询所有的商品，按价格进行排序.(asc-升序，desc-降序)
	2.查询名称有新的商品的信息并且按价格降序排序。

聚合函数：
	* sun(), avg(), max(), min(), count();
	1.获得所有商品的价格的综合
	2.获得商品表中价格的平均值
	3.获得商品表中有多少条记录

分组： 使用group by
	1.根据cno字段分组，分组后统计商品的个数
	2.根据cno分组，分组统计每组商品的总数量，并且总数量>200




ss





