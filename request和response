**********day10************
会使用 request 和 response
案例1-文件下载案例
技术分析:
	response
	文件下载
////////////////////////
response:响应
	作用:
		往浏览器写东西
	组成部分:
		响应行 响应头 响应体
		操作响应行
			格式:
				协议/版本 状态码 状态码说明
			状态码:
				1xx: 已发送请求
				2xx: 已完成响应
					200:正常响应
				3xx: 还需浏览器进一步操作
					302:重定向 配合响应头: location
					304:读缓存
				4xx: 用户操作错误
					404:用户操作错误
					405:访问的方法不存在
				5xx: 服务器错误
					500:内部异常
			常用方法:
				setStatus(int 状态码):针对于 1xx 2xx 3xx
				了解:
					sendError(int 状态码):针对于4xx 5xx
		操作响应头
			格式: key/value(value 可以是多个值)
			常用的方法:
				setHeader(String key, String value):设置字符串形式的响应头
				setIntHeader(String key, int value):设置整形形式的响应头
				setDateHeader(String key, long value):设置时间的响应头

				addHeader(String key,String value):添加字符串形式的响应头,之前设置过则追加,没有则设置
				addIntHeader(String key,int value)
				addDateHeader(String key,long value)
			常用的响应头:
				location: 重定向
				refresh: 定时刷新
				content-type: 设置文件的 mime 类型,设置响应流的编码及告诉浏览器用什么编码打开
				content-disposition: 文件下载

				重定向:
					response.sendRedirect("/day10/loc2");

				定时刷新:
					方案1:设置头 refresh 做过
					方案2:http 的 meta 标签

		操作响应体:
			页面上要展示的内容
			常用方法:
				Writer getWriter():字符流
				ServletOutPutStream getOutPutStream():字节流

				自己写的东西用字符流,其他的一概用字节流.

			处理响应的中文乱码:
				方式1:★
					response.setContentType("text/html;charset=utf-8");
				方式2:理解
					response.setHeader("content-type", "text/html;charset=utf-8");

			注意:
				两个流互斥
				当响应完成之后,服务器会判断流是否已关闭,若没有关闭,服务器会自动帮我们关闭(底层使用的缓冲流).

///////////////////////////
文件下载:
	下载的方式
		1.超链接下载
			<a href="/day10/download/day10.txt">下载 day10.txt</a>
			若浏览器能解析该资源的 mime 类型,则打开;若不能则直接下载;
		2.编码下载 通过 Servlet 完成
			<a href="/day10/download?name=day10.txt">下载 day10.txt</a>
			a. 设置文件的 mime 类型
				String mimeType = context.getMimeType(文件名)
				response.setContentType(类型)

			b. 设置下载头信息 content-disposition
				response.setHeader("content-disposition", "attachment;filename="+文件名称);
			c. 提供流
				response.getOutputStream();
/////////////////////////
扩展:
	通过 response 生产验证码
	验证码:
		作用:防止暴力攻击
/////////////////////////
案例2-完成用户注册操作
需求:
	在一个表单页面上填写用户数据,点击提交,将所有的数据提交到服务器上,通过 java 代码最终保存到数据库中.
技术分析:
	表单
	request
/////////////////////////
request: 请求
	作用:获取浏览器发送过来的数据
	组成部分:
		请求行 请求头 请求体
	操作请求行:
		格式:
			请求方式 请求资源 协议/版本
		常用方法:HttpServletRequest
			掌握:
				String getMethod():获取请求方式
				String getRemoteAddr():获取ip地址
				String getContextPath():在java代码中获取项目名称 (/day10)
			了解:
				getRequestURI():获取的是 从项目名到参数之前的内容 /day10/regist
				getRequestURL():获取的是 带协议的完整的路径 http://localhost/day10/regist
				String getQueryString():get请求的所有参数 username=tom&password=123
				String getProtocol():获取协议和版本

	操作请求头:
		格式:key/value(value可以是多个值)
		常用方法:
			★ String getHeader(String key):通过key获取指定的value(一个)
			了解:
				Enumeration getHeaders(String name) :通过key获取指定的value(多个)
				Enumeration getHeaderNames():获取所有的请求头的名称
				int getIntHeader(String key):获取整形的请求头
				int getDateHeader(String key):获取时间的请求头
		重要的请求头:
			user-agent:浏览器内核 msie firefox chrome
			referer:页面从哪里来 防盗链

	操作请求参数:
		username=tom&password=123&hobby=drink&hobby=sleep
		常用的方法:
			String getParameter(String key):获取一个值
			String[] getParameterValues(String key):获取多个值
			Map<String,String[]> getParameterMap():获取所有的参数名称和值

		username:tom
		hobby:[drink, sleep]
		======map=======
		username::[tom]
		password::[123]
		hobby::[drink, sleep]

	请求的中文乱码:
		对于get请求:参数追加到地址栏,会使用utf-8编码,服务器(tomcat7)接收到请求之后,使用iso-8859-1解码,所以会出现乱码.
		对于post请求,参数是放在请求体中,服务器获取请求体的时候使用iso-8859-1解码,也会出现乱码.

		通用的方法:
			new String(参数.getBytes("iso-8859-1"),"utf-8");
		针对于post请求来说:只需要将请求流的编码设置成utf-8即可
			request.setCharacterEncoding("utf-8");

//////////////////////////////////////////////////
域对象:
	request:
		创建:一次请求来的时候
		销毁:响应生成的时候
		作用:
			一次请求里面的数据
		请求转发(请求链,请求串)
			request.getRequestDispatcher("内部路径").forward(request,response)

//////////////////////////////////////////////////

案例2-用户注册 步骤分析
	1.数据库和表(day09)
	2.页面(表单)
		给每个字段添加name属性
		还需修改表单提交的路径 method=post
	3.表单提交到一个Servlet(RegistServlet)
	4.registservlet
		操作:
			接收数据,封装成一个user
			调用UserService完成保存操作 int regist(User user)
			判断结果是否符合我们的预期
				若int = 1;插入成功
				若int!= 1;插入失败
			相应的提示信息在当前Servlet不作处理,将信息转发给另一个Servlet展示 (MessageServlet);
	5. UserService
		调用Dao
	6. Userdao 通过dbUtils在数据库中插入一条记录.

//////////////////////////////////////////////////
扩展:
	URLEncoder.encode(s, "utf-8"); 编码
	URLDecoder.decode(s, "ios8859-1"); 解码
文件下载扩展:
	中文名称的文件名下载的时候名称会出现问题
	常见的浏览器需要提供文件名称的utf-8编码
	对于火狐来说需要提供文件名称的base64编码
		方案1:使用工具类
		方案2:网上的方式(80%好使)
			new String(filename.getByte("gbk"),"iso8859-1");
//////////////////////////////////////////////////
请求转发和重定向的区别:
	重定向    			请求转发
	发送两次请求			一次
	地址栏发生改变			不变
	从浏览器发送			服务器内部转发
	不存在域对象(request) 可以使用域对象(request)
	response的方法		request的方法
	可以请求站外资源		不可以

	














