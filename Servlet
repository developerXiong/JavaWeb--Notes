////////////////////////////
http:掌握一些头信息
	超文本传输协议：
		规定数据的格式
	浏览器网服务器发送 ---- 请求
	服务器往浏览器回写 ---- 响应
请求：
	组成部分：
		请求行 请求头 请求体
		格式：请求方式 访问的资源 协议/版本
		例如：GET /day0801/1.html HTTP/1.1
		请求方式：get post
			get参数大小有限制，post没有
	请求行：请求信息的第一行
	请求头：请求信息的第二行到空行结束
	请求体：以后的内容
响应：（response）
	组成部分：
		响应行 响应头 响应体
	响应行：
		状态码：
			200 正常
			302	重定向
			304 读缓存
			404	用户操作资源不存在
			500	服务器内部异常
	响应头：
		key-value（value可以是多个值）
		常见的头：
		掌握的头信息：
			content-Type：数据类型
			Location：跳转的方向 和302一起使用
			Last-Modified 最后修改时间
			Refresh：定时刷新
			Content-Disposition：下载
			Set-Cookie：
	响应体：
/////////////////////////////
案例1-完成登录案例
需求：
	在页面上输入用户名和密码，提交到服务器上，服务器拿着用户名和密码到
	数据库中查找此用户，若有此用户提示登录成功
	若无此用户，则提示。。。
技术分析：
	表单
	servlet
	请求（request）
	响应（response）
//////////////////////////
表单：
	收集用户数据
	所有的字段要想提交到服务器必须有name属性
	提交的地址 action
	请求方式：post
//////////////////////////
servlet:
	动态的web开发技术，本质上就是一个类，运行在服务器端的一个java小程序
	处理业务逻辑，生成动态的web内容
编写一个servlet步骤：
	1. 编写一个类
		a. 继承HttpServlet
		b. 重写doGet或者doPost方法
	2. 编写配置文件（web-inf/web.xml）
		a. 注册servlet
		b. 绑定路径
	3. 访问
		http://主机：端口号/项目名/路径
接收参数：
	String value = request.getParameter("key");
	例如：http://localhost/day09/hello?username=tom
		request.getParameter("username");
回写内容：
	response.getWrite().print("success");
	处理响应数据的乱码：
		resp.setContentType("text/html;charset=utf-8");// 放在第一行
//////////////////////////
步骤分析：
	1. 数据库和表
		create database day09;
		use database day09;
		create table user(
			id int primary key auto_increment,
			username varchar(20),
			password varchar(20),
			email varchar(20),
			name varchar(20),
			sex varchar(20),
			birthday DATE,
			hobby varchar(50)
		);

		insert into user values(null,'tom','123','tom@126.com','tom','1','1998-01-01',null);
	2. 创建工程
	3. 复制页面
		修改login.index
			给用户名和密码添加name属性
			修改表单的action属性
				action="http://localhost/day0901/login"
			添加method属性
				method="post"
	4. 导入jar包：
		驱动jar dbutils c3p0 
	5. 导入工具类和配置文件
		datasourceUtils
		c3p0-config.xml
	6. 创建servlet（LoginServlet：路径/login）
		接收用户名和密码
		调用service层（UserService）完成登录操作
		提示信息
	7. UserService
		login(username,password)
			调用dao
	8. dao
		通过用户名和密码查询数据库
///////////////////////////////////////
Servlet总结：
servlet的体系结构：（了解）
	Servlet：接口
		|
	GenericServlet：抽象类
		|
	HttpServlet：抽象类
		|
	自定义servlet

	servlet常用方法：
		void init(ServletConfig config):初始化方法
		void service(ServletRequest request, ServletResponse response):服务 处理业务逻辑
		void destory():销毁

		ServletConfig getServletConfig():获取当前servlet的配置对象
	GenericService常用方法：
		除了service方法没有显示，其他的都实现了
		空参的init() 若我们想对自己的servlet进行初始化操作，重写这个init()即可

	HttpServlet常用方法：
		service做了实现，把参数强转，调用了重载的service方法
			重载的service方法获取请求的方式，根据请求方式的不同调用相应的doxxx()方法
		doGet和doPost方法
////////////////////////////////
servlet生命周期 ★★★
	void init(ServletConfig config):初始化方法
		执行者：服务器
		执行次数：1
		执行时机：默认第一次访问的时候
	void service(ServletRequest request, ServletResponse response):服务 处理业务逻辑
		执行者：服务器
		执行次数：请求一次执行一次
		执行时机：请求来的时候执行
	void destory():销毁
		执行者：服务器
		执行次数：1
		执行时机：当servlet被移除的时候或者服务器正常关闭的时候

	servlet是单实例多线程
	默认第一次访问的时候，服务器创建servlet，并调用init方法实现初始化操作，并调用一次service方法，每当请求来的时候，服务器创建一个线程，调用service方法执行自己的业务逻辑。当servlet被移除的时候或服务器正常关闭的时候，服务器调用servlet的destory方法实现销毁操作。
////////////////////////////////////////
url-pattern的配置：★
	方式1：完全匹配 必须以“/”开始 例如：/hello /a/b/c
	方式2：目录匹配 必须以“/”开始 以“*”结束 例如： /a/* /*
	方式3：后缀名匹配 以“*”开始 以字符结尾 例如： *.jsp *.do *.action

	优先级：
		完全匹配>目录匹配>后缀名匹配

练习：
	有如下的一些映射关系：
		Servlet1 映射到 /abc/*
		Servlet2 映射到 /*
		Servlet3 映射到 /abc
		Servlet4 映射到 *.do
	问题：
	当前期URL为"/abc/a.html","/abc/*"和"/*"都匹配，那个servlet响应
		1
	当前期URL为"/abc","/*"和"/abc"都匹配，那个响应
		3
	当前期URL为"/abc/a.do","/abc/*"和"*.do"都匹配
		1
	当前期URL为"/a.do", "/*"  "*.do"
		2
/////////////////////////
在servlet标签下有一个子标签 load-on-startup
	作用：修改servlet的初始化时机
	取值：正整数  值越大优先级越低
/////////////////////////
当我们的配置文件里面没有指定配置的话，会查找tomcat的web.xml，
	若请求我们自己的项目处理不了，tomcat的默认的servlet会帮我们处理信息。
//////////////////////////////////
路径的写法：
	相对路径：
		当前路径	./ 或者 什么都不写
		上一级路径 ../
	绝对路径：
		带主机和协议的绝对路径（访问站外资源）
			http://www.xiongcy.com/xxxx
			http://localhost:3976/day09/hello
		不带主机和协议的绝对路径
			/day09/hello  (经常使用)
///////////////////////////////////
案例2-当我们登录失败，提示 ”用户密码不匹配“，3秒以后跳转到登录页面
技术分析：
	定时刷新
常见的响应头-refresh
	响应头格式：
		refresh：秒数；url=跳转的路径
	设置响应头：
		response.setHeader(String key, String value);// 设置字符串形式的响应头
		response.addHeader(String key, String value);// 添加响应头，若之前设置过，则追加；若没有设置则设置
	设置定时刷新：
		response.setHeader("refresh","3;url=/day0901/login.html");
步骤分析：
	登录失败之后，修改业务逻辑
		打印之后增加一个头信息即可
///////////////////////////////////
案例3-统计登录成功的总人数
需求：
	在一个用户登录成功之后，获取之前登录成功的总人次，将次数+1。在访问另一个servlet的时候，显示登录成功的总人次。
技术分析：  
	ServletContext
/////////////////////
ServletContext:
	上下文(全局管理者)：
	常用的方法：
		setAttribute(String key, Object value);
		Object getAttribute(String key);
		removeAttribute(String key)://移除值
获取全局管理者:
	getServletContext()
/////////////////////////////////////
步骤分析:
	1. 在项目启动的时候,初始化登录次数
		在 loginServlet 的 init()方法中获取全局管理者,将值初始化为0,放入 ServletContext 上.
	2. 登录成功之后,在 loginServlet 中获取全局管理者,获取登录成功的总次数
	3. 然后将次数+1,然后将值设置回去.
	4. 当访问 showServlet 的时候,获取全局管理者,获取登录成功的总次数.

///////////////////////////////////
ServletConfig:(了解)
	Servlet 配置对象
	作用:
		1. 获取当前 Servlet 的名称
		2. 获取当前 Servlet 的初始化参数
		3. 获取全局管理者
	方法:
		String getServletName():在 web.xml 中配置的 servlet-name

		String getInitParamter(String key):通过名称获取指定的参数值
		Enumration getInitParamter(String key):获取所有的参数名称
			web.xml init-param

	servletconfig 是由服务器创建的,在创建 servlet 的同时也创建了它,通过 servlet 的 init(servletConfig config)将config 传递给 servlet, 由 servlet 的 getServletConfig 方法获取
/////////////////////////////////////
ServletContext:(理解)
	上下文(全局管理者)
	一个项目的引用,代表了当前项目.
	当项目启动的时候,服务器为每一个 web 项目创建一个 servletContext 对象.
	当项目被移除的时候或者服务器关闭的时候 servletContext 销毁
	作用:
		1.获取全局的初始化参数
		2.共享资源(xxxAttribute)
		3.获取文件资源
		4.其他操作
	获取 servletContext:
		方式1:(了解)
			getServletConfig().getServletContext()
		方式2:
			getServletContext()
	常用方法:
		1.了解
			String getInitParamter(String key):通过名称获取指定的参数值
		Enumration getInitParamter(String key):获取所有的参数名称
			 在根标签下有一个 context-param
		2.xxxAttribute
		3.
			String getRealPath(String path):获取文件部署到 tomcat 上的真实路径(带 tomcat 路径)
				getRealPath("/"):
			InputStream getResourceAsStream(String path):以流的形式返回一个文件
		4.获取文件的 mime 类型  大类型/小类型
			String getMimeType(String 文件名称)
//////////////////////////////////////////////
域对象:★★★
	servletContext
	当成 map 集合
		常用方法:
			xxxAttribute()
	servletContext创建和销毁:
		当项目启动的时候,服务器为每一个 web 项目创建一个 servletContext 对象.
		当项目被移除的时候或者服务器关闭的时候 servletContext 销毁
	存放:
		共享的数据
/////////////////////////////////
获取文件的路径:
	通过类加载器获取文件:2.txt 放在 classes 目录下
		类. class.getClassLoader().getResource("2.txt").getPath()







